* Benchmarks for WRF
This repo documents the benchmark cases used for assessing the scaling
performance of WRF on NCAR's Cheyenne Supercomputer.

- ~cases/~ contains the namelists for WPS and WRF for the various benchmark
  cases.
- ~scripts/~ contains useful scripts for automating the compilation, running,
  and analysis of the WRF test cases
  - ~wrf_compile~ will compile WRF from source with the given options. See
    ~wrf_compile --help~
  - ~wrf_run_pbs_jobs~ will create the run directories and pbs job scripts
    necessary to run the given WRF versions with the given node counts and
    benchmark cases. See ~wrf_run_pbs_jobs --help~.
- ~results/~ contains the timing results and analysis and plotting code

** Examples of pbs job scripts for cheyenne
#+begin_src sh
#!/bin/bash
### Job Name
#PBS -N cheyenne_wrf
### Project code
#PBS -A SCSG0002
#PBS -l walltime=00:20:00
#PBS -q regular
### Merge output and error files
#PBS -j oe
### Select 2 nodes with 36 CPUs each for a total of 72 MPI processes
#PBS -l select=2:ncpus=36:mpiprocs=36
### Send email on abort, begin and end
#PBS -m abe
### Specify mail recipient
#PBS -M akirak@ucar.edu

export TMPDIR=/glade/scratch/$USER/temp
mkdir -p $TMPDIR

### Run the executable
mpiexec_mpt ./wrf.exe
#+end_src

~real.exe~ must also be run with mpi
#+begin_src sh
mpiexec_mpt ./real.exe
#+end_src

To profile with ~arm-map~
#+begin_src sh
module load arm-forge/18.1.2
# map --connect ./wrf.exe # for live, interactive profiling
map --profile ./wrf.exe # for generating profile file to be loaded later
#+end_src

To profile with ~arm-reports~
#+begin_src sh
module load arm-reports/18.1.2
perf-report -mpi -n 72 ./wrf.exe
#+end_src

To use ~mvapich~ instead of ~mpt~
#+begin_src sh
module load mvapich2
mpirun_rsh -hostfile $PBS_NODEFILE -n 72 ./wrf.exe
#+end_src



** Data for the various benchmark cases
*** katrina (1km, 3km, 30km)
Data for running the Hurricane Katrina cases can be downloaded from the WRF tutorial page

#+begin_src sh
curl http://www2.mmm.ucar.edu/wrf/TUTORIAL_DATA/Katrina.tar.gz -o Katrina.tar.gz
tar -xf Katrina.tar
#+end_src

The 30km case is the same namelist as shown in the WRF-ARW tutorial at
[[http://www2.mmm.ucar.edu/wrf/OnLineTutorial/CASES/SingleDomain/index.html]]

WPS and ~real.exe~ must be run to generate ~wrfbdy_d01~ and ~wrfrst_d01~ for
these cases

*** conus (12km, 2.5km)
The ~wrfbdy_d01~ and ~wrfrst_d01~ files for the official CONUS benchmarks at
12km and 2.5km resolution can be found at:
[[http://www2.mmm.ucar.edu/wrf/WG2/benchv3/]]

*** maria (1km, 3km) and new_conus (12km, 2.5km)
The data for these Hurricane Maria cases and CONUS cases comes from the NCEP GFS
Model Runs which can be downloaded form [[https://rda.ucar.edu/datasets/ds084.1/]].
However this data already resides on glade, so the WPS scripts just link in the
appropriate glade directories.

WPS and ~real.exe~ must be run to generate ~wrfbdy_d01~ and ~wrfrst_d01~ for
these cases

*** ~dust_simple_01~ and ~tracer_simple_01~
These are wrf-chem cases

** Example workflow for new_conus12km
Make sure the ~WRF_benchmarks/scripts~ is in your ~$PATH~. As always, make sure
to change the paths to your directory structure. All the scripts in the
~srcipts/~ directory do not hardcode paths but the scripts in the ~cases/~
directory and the pbs job scripts do hardcode paths.

The following will give you a table with timing results on the new_conus12km
benchmark using WRFV4.0 compiled with gnu8.1.0 and mvapich2.2 for two trials
scaled across 1, 2, 4, 8 nodes on cheyenne. (cheyenne's 36 cores/node is
hardcoded into ~wrf_run_pbs_jobs~)

#+begin_src sh
qsub WRF_benchmarks/WRFs/WRFV4.0-gnu8.1.0-mvapich2.2.pbs
qstat # wait for job to finish...
qsub WRF_benchmarks/WPSs/WPSV4.0-gnu8.1.0.pbs
qstat # wait for job to finish...
./WRF_benchmarks/cases/new_conus12km.sh
qstat # wait for job to finish...
wrf_run_pbs_jobs -w ~/work/WRFs/WRFV4.0-gnu8.1.0-mvapich2.2 -c ~/WRF_benchmarks/cases/new_conus12km -t 1 2 -a '00:30:00'-n 1 2 4 8
qstat # wait for jobs to finish...
wrf_summarize -r ~/work/run/new_conus12km-WRFV4.0-gnu8.1.0-mvapich2.2-* -o ~/work/results
cat ~/work/results/*.tbl
#+end_src

